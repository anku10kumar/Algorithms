1. What are some pros and cons of using linked lists instead of arrays?

Answer: 

Pros:

* Linked list is a dynamic data structure so it can grow and shrink at runtime by allocating and deallocating memory. So there is no need to give initial size of linked list.

* Insertion and deletion of nodes are really easier. Unlike array here we donâ€™t have to shift elements after insertion or deletion of an element. 

* As size of linked list can increase or decrease at run time so there is no memory wastage. In case of array there is lot of memory wastage. 

* Data structures such as stack and queues can be easily implemented using linked list.



Cons: 

* Elements or nodes traversal is difficult in linked list. We can not randomly access any element as we do in array by index.

* In linked list reverse traversing is really difficult.

* More memory is required to store elements in linked list as compared to array. Because in linked list each node contains a pointer and it requires extra memory for itself.


2. Come up with a real world example of a linked list.

Answer: Our brain is a good example of linked list. In the initial stages of learning something by heart, the natural process is to link one item to next. It's a subconscious act. Also, when we forget something and try to remember, then our brain follows association and tries to link one memory with another and so on and we finally recall the lost memory.


Programming Questions

1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.


Answer: 

Bug - if the head node is null, then set head node to new node else set current node to head. We also need to add a while loop, while current.next node is not null, it should be assigned to the new node. 

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node is null
 THEN SET head to node
ELSE
 SET current to head
 END IF
WHILE 
  Current is not null
  SET current TO next node
END WHILE
END FUNCTION


function ListNode(val){

  this.val = val;
  this.next = null;
}

const listNode = new ListNode('a')
listNode.next = new ListNode('b')
listNode.next.next = new ListNode('c')
listNode.next.next.next = new ListNode('d')

console.log(listNode);



2. Given an unsorted singly linked list, remove all duplicates from the linked list.

Answer: 

var inputArr = ['a','c','d','d','a'];

function rmDup(inputArr){
  for (let i = 0; i<inputArr.length; i++){
    let ell = inputArr[i];
    (function tracer(currentIndex){
      if(currentIndex ===inputArr.length) return
      if(inputArr[currentIndex]===ell){
        let temp = ell;
        inputArr[currentIndex] = inputArr[inputArr.length-1]
        inputArr[inputArr.length-1] = temp;
        inputArr.pop();
        tracer(currentIndex)
      } else{
        tracer(currentIndex+1)
      }
    })(i+1);
  }
}

rmDup(inputArr);
console.log(inputArr)

3. Given an unsorted singly linked list, reverse it.

Answer: 

function ListNode(val){

  this.val = val;
  this.next = null;
}

const listNode = new ListNode('a')
listNode.next = new ListNode('b')
listNode.next.next = new ListNode('c')
listNode.next.next.next = new ListNode('d')

function reverseList(oldHead){
let newHead =null
while(oldHead){
  let temp = oldHead.next;
  oldHead.next = newHead;
  newHead= oldHead;
  oldHead = temp;
}
return newHead;
}
console.log(reverseList(listNode));










