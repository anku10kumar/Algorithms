1. What is the main difference between a stack and a queue?

Answer: 
The main differences between stack and queue are that stack uses LIFO (last in first out) method to access and add data elements whereas Queue uses FIFO (First in first out) method to access and add data elements.

Stack has only one end open for pushing and popping the data elements on the other hand Queue has both ends open for enqueuing and dequeuing the data elements.

2. What are the similarities between stacks and queues?

Answer: 
* The Stack and Queue both are the non-primitive data structures.
* Stack and queue is linear data structures they both stores sequentially.
* Insertion and Deletion operation can be performed on Stack as well as in queue.


3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

Answer: 
Stack data structure is most suitable to implement redo-undo feature. This is because the stack is implemented with LIFO(last in first out) order which is equivalent to redo-undo feature i.e. the last re-do is undo first.

Programming Questions:

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

Answer: 

function hello(str){
      var newString = "";
      for (let i=str.length-1; i >=0; i--){
        newString +=str[i];
      }
      console.log(newString);
    }
    
    hello('Bloc!');

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.


 var stack = []; 
 stack.push(2);
 stack.push(8);
 stack.push(6); 
 var i = stack.pop(); 
 console.log(stack); 
      
  var queue = []; 
  queue.push(2);
  queue.push(5);
  queue.push(3); 
  var i = queue.shift(); 
  console.log(queue); 

To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

Answer:

function Queue() {
      this.data = [];
    }
    Queue.prototype.add = function(record) {
      this.data.unshift(record);
    }
    Queue.prototype.remove = function() {
      this.data.pop();
    }
    const q = new Queue();
    q.add(1);
    q.add(2);
    q.add(3);
    console.log(q);
    
    q.remove();
    console.log(q);



