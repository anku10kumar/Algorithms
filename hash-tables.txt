1. What is a hash table?

Answer: It is a type of data structure that stores each value by linking it to a key, forming key-value pairs. 


2. What is hashing?

Answer: Hashing is the conversion from a key of any type to a numerical index. 


3. How does a hash table store data?

Answer: A hash table is commonly used to store data by some form of identifier. A hashing function is used to convert the key to a specific, fixed-length number, referred to as a hash code. Once a hash table has a hash code it can use as a key, it can figure out where to place the key-value pair in its internal array.

4. How are hash tables and objects different?

Answer: Hash tables are used as a collection of similar data, while objects can hold different types of data put together. 


5. Determine whether you would use a hash table or an object to store each of the following pieces of data:  

* A list of pets and their unique names. Hash Table
* The name, age, and the birthday of your best friend. Object 
* The name and location of every company in a given city. Hash table 
* All of the books checked out from a library by a particular individual. Hash table 
* The primary and secondary phone numbers for a contact.Object 


Programming Questions


1. Create a hash table that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers.

Answer: 

  var hash = (string, max) => {
    var hash = 0;
    for (var i = 0; i < string.length; i++) {
      hash += string.charCodeAt(i);
    }
    return hash % max;
  };

  let HashTable = function() {

    let storage = [];
    const storageLimit = 100;


    this.add = function(key, value) {
      var index = hash(key, storageLimit);
      if (storage[index] === undefined) {
        storage[index] = [
          [key, value]
        ];
      } else {
        var inserted = false;
        for (var i = 0; i < storage[index].length; i++) {
          if (storage[index][i][0] === key) {
            storage[index][i][1] = value;
            inserted = true;
          }
        }
        if (inserted === false) {
          storage[index].push([key, value]);
        }
      }
    };


    this.lookup = function(key) {
      var index = hash(key, storageLimit);
      if (storage[index] === undefined) {
        return undefined;
      } else {
        for (var i = 0; i < storage[index].length; i++) {
          if (storage[index][i][0] === key) {
            return storage[index][i][1];
          }
        }
      }
    };

  };



  let ht = new HashTable();
  ht.add(1000, {
    name: "Anna",
    address: "100 bond st"
  })

  console.log(ht.lookup(1000));


2. Create a hash table that allows a store owner to track their store's inventory and quantity.

Answer: 


var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let HashTable = function() {
  
  let storage = [];
  const storageLimit = 14;
  
  this.print = function() {
    console.log(storage)
  }
  
  this.add = function(key, value) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key, value]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          storage[index][i][1] = value;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([key, value]);
      }
    }
  };
  
  
  this.lookup = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };
  
};



let ht = new HashTable();
ht.add('wheat', '100 pounds');
ht.add('rice', '75 pounds');
ht.add('bread', '15 loafs');
console.log(ht.lookup('rice'))


3. Create a hash table that allows digital copies of newspapers to be entered and searched by publisher and publication date.

Answer: 


//Hash Function
let hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
}

class Newspaper {
  constructor() {
    this.storage = [];
    this.storageLimit = 75;
  }

  add(publisher, pubDate) {
    let key = publisher + pubDate;
    let index = hash(key, this.storageLimit);
    let data = [publisher, pubDate];
    if (this.storage[index] === undefined) {
      this.storage[index] = [];
    }
    this.storage[index].push(data);
  }

  search(publisher, pubDate) {
    let key = publisher + pubDate;
    let index = hash(key, this.storageLimit);
    let result = [];

    if (!this.storage[index]) {
      return 'No results founds'
    }
    this.storage[index].forEach(entry => {
      if (entry[0] === publisher && entry[1] === pubDate) {
        result.push(entry);
      }
    })
    return result;
  }
}


let news = new Newspaper();
news.add('New Yorker', '2001');
news.add('Home Improvement', '2013');
news.add('Archie comics', '2018');
news.add('Dog Life', '2019')

console.log(news.search('Dog Life', '2019'))